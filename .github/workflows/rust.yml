name: Rust

on: 
  push:
    # no restrictions here friend just whenever theres a push
  workflow_dispatch:
    # Nutt'n here to see
env:
  llvm_version: 18.1.5

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      
    # steps
    steps:
      # - uses: actions/checkout@v4
      # - name: get-cmake
      #   uses: lukka/get-cmake@v3.29.2
      # - uses: actions-rs/cargo@v1
      #   with:
      #     command: test
      # - name: Setup Python
      #   uses: actions/setup-python@v5.1.0
      #   with:
      #       cache: 'pip'
      # - run: pip install setuptools
      # # Build commands
      # - name: build
      #   continue-on-error: true
      #   run: |
      #     cargo install --path .
      #     llvmenv init
      #     llvmenv build-entry -G Ninja -t Debug ${{ env.llvm_version }}

      # - name: Set Build
      #   run: |
      #     llvmenv global ${{ env.llvm_version }}

      - name: Set Install Path Linux
        if: runner.os == 'Linux'
        run: |
          mkdir $HOME/.local/share/llvmenv/${{ env.llvm_version }}

      - name: Set Install Path Macos
        if: runner.os == 'Macos'
        run: |
          mkdir $HOME/Library/Application Support/llvmenv/${{ env.llvm_version }}

      - name: Set Install Path Windows
        if: runner.os == 'Windows'
        run: |
          mkdir %localappdata%\llvmenv\${{ env.llvm_version }}
        
      - name: ${{ matrix.os }}-build-artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          path: ${{ env.INSTALL_PATH }}
          retention-days: 1
          overwrite: true

  check-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  check-clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
